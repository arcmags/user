vim9script
## ~/.vim/vimrc ::

set nocompatible
filetype plugin on

# TODO: integrate fzf, ranger?, vifm?
# TODO: bool toggle function
# TODO: checkout clipboard

## environment ::
const HOME = isdirectory($HOME) ? resolve($HOME) : ''
const UDIR = isdirectory($UDIR) ? resolve($UDIR) : ''

# files:
set autoread
set encoding=utf8 fileformats=unix,dos,mac
set modeline modelines=1
set nobackup noswapfile nowritebackup
set tags=tags;/

# formatting:
set autoindent
set expandtab shiftwidth=4 smarttab tabstop=4
set formatoptions=tcqj
set nojoinspaces
set nopaste
set nrformats=bin,hex
set textwidth=0

# editor:
set backspace=eol,indent,start
set hidden
set history=500
set ignorecase incsearch magic smartcase wrapscan
set mouse=a
set noerrorbells novisualbell t_vb=
set nospell spellcapcheck= spelllang=en_us spelloptions=camel
set notimeout timeoutlen=400 ttimeout
set shortmess=aIoOtT
set splitbelow splitright

# colors:
set background=dark
syntax enable
colorscheme utheme

# interface:
set cursorline nocursorcolumn
set hlsearch
set laststatus=2 statusline=%!StatusLine()
set nofoldenable foldcolumn=0
set number norelativenumber
set scrolloff=8
set showcmd cmdheight=1
set showtabline=1 tabline=%!TabLine()
set signcolumn=number
set wrap whichwrap+=h,l,s,<,>,[,]
set wildmenu wildoptions=pum wildignore=*.o,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
set switchbuf=uselast

# netrw:
g:netrw_banner = 0
g:netrw_fastbrowse = 0
g:netrw_keepdir = 0
g:netrw_list_hide = '^\.\/$'
g:netrw_silent = 1
g:netrw_sort_sequence = '\/$'

# terminal: TODO:
set autoshelldir

## autocommands ::
augroup vimrc
    autocmd!
    #autocmd FileChangedRO * setl noreadonly | Msg('W: readonly buffer')
    autocmd BufEnter * silent! lcd %:p:h
    autocmd BufWritePre * TextTrim()
    autocmd TerminalWinOpen * setl nonumber
augroup EnD

## mappings ::
g:mapleader = ";"
set cedit=<c-q>
set wildcharm=<c-n>
nnoremap Q <Nop>

# remaps:
nnoremap <c-w>m <c-w>x
nnoremap <m-q> Q
nnoremap <m-x> <c-x>
noremap \ ;

# modes:
nnoremap <leader>mV <scriptcmd>VisMode('V')<cr>
nnoremap <leader>mv <scriptcmd>VisMode('v')<cr>
nnoremap <leader>mw <scriptcmd>WinMode()<cr>
nnoremap R gR
nnoremap gR R

# buffer: new:
nnoremap <c-w><c-e> <cmd>Explore<cr>
nnoremap <c-w>N <cmd>enew<cr>
nnoremap <c-w>\ <cmd>terminal ++curwin ++noclose<cr>
nnoremap <c-w>e <cmd>Explore<cr>

# buffer: save:
noremap <c-s> <esc><cmd>write<cr>
noremap! <c-s> <esc><cmd>write<cr>

# buffer: next/previous:
nnoremap <c-n> <cmd>silent bnext<cr>
nnoremap <c-p> <cmd>silent bprevious<cr>
nnoremap <c-w><c-n> <cmd>silent bnext<cr>
nnoremap <c-w><c-p> <cmd>silent bprevious<cr>
nnoremap <c-w>n <cmd>silent bnext<cr>
nnoremap <c-w>p <cmd>silent bprevious<cr>

# buffer: list:
nnoremap <c-w>B <scriptcmd>BufList('!')<cr>:b<Space>
nnoremap <c-w>b <scriptcmd>BufList()<cr>:b<Space>

# buffer: wipe:
nnoremap <c-w><c-x> <scriptcmd>BufWipe()<cr>
nnoremap <c-w>X <scriptcmd>BufWipe('!')<cr>
nnoremap <c-w>x <scriptcmd>BufWipe()<cr>
nnoremap <c-x> <scriptcmd>BufWipe()<cr>

# window: navigate:
nnoremap <c-w><space> <c-w><c-p>
nnoremap <c-w><c-space> <c-w><c-p>

# window: terminal split:
nnoremap <c-w>` <cmd>3split<cr><cmd>ter ++curwin ++noclose<cr>

# window: close/quit:
nnoremap <expr> <c-q> winnr('$') > 1 ? '<cmd>clo<cr>' : '<cmd>q<cr>'
nnoremap <expr> <c-w><c-q> winnr('$') > 1 ? '<cmd>clo<cr>' : '<cmd>q<cr>'
nnoremap <expr> <c-w>q winnr('$') > 1 ? '<cmd>clo<cr>' : '<cmd>q<cr>'
nnoremap <expr> <c-w>Q '<cmd>' .. (winnr('$') > 1 ? 'clo!' : tabpagenr('$') > 1 ? 'q!' : 'qa!') .. '<cr>'

# tab: move:
nnoremap <expr> <c-w>GT tabpagenr() == 1 ? '<cmd>tabm<cr>' : '<cmd>-tabm<cr>'
nnoremap <expr> <c-w>Gt tabpagenr() == tabpagenr('$') ? '<cmd>0tabm<cr>' : '<cmd>+tabm<cr>'

# tab: new:
nnoremap <c-w><c-t> <cmd>tab split<cr>
nnoremap <c-w>t <cmd>tab split<cr>

# cursor: down/up display line:
noremap <silent> <c-j> gj
noremap <silent> <c-k> gk

# text: format (wrap) lines to textwidth if set, 79 characters if not:
nnoremap <leader>f gqip
vnoremap <leader>f gq

# text: trim all trailing spaces and lines:
nnoremap <leader>0 <scriptcmd>TextTrim()<cr>

# text: replace spaces with newlines:
nnoremap <leader>1 vip<esc><cmd>'<,'>keeppatterns s/ \+/\r/ge<cr>
vnoremap <leader>1 <esc><cmd>'<,'>keeppatterns s/ \+/\r/ge<cr>

# text: insert/update date string:
nnoremap <leader>d <scriptcmd>DateUpdate()<cr>

# text: join lines:
nnoremap <leader>J vipJ

# text: sort lines:
nnoremap <leader>S mzvip<esc><cmd>'<,'>sort<cr>`z
vnoremap <leader>S <esc><cmd>'<,'>sort<cr>

# text: sort lines by first alphanumeric character in each line:
nnoremap <leader>s mzvip<esc><cmd>'<,'>sort /^[^A-Za-z0-9]*/<cr>`z
vnoremap <leader>s <esc><cmd>'<,'>sort /^[^a-za-z0-9]*/<cr>

# text: toggle html escape characters (&amp; &lt; &gt;):
noremap <leader>H <scriptcmd>HTMLToggle('!')<cr>
noremap <leader>h <scriptcmd>HTMLToggle()<cr>

# text: toggle comment:
noremap <leader>U <scriptcmd>CommentToggle('!')<cr>
noremap <leader>u <scriptcmd>CommentToggle()<cr>

# text: insert blank lines:
nnoremap - mzO<esc>0D`z
nnoremap + mzo<esc>0D`z

# text: move lines:
nnoremap <m-j> mz<cmd>m+<cr>`z
nnoremap <m-k> mz<cmd>m-2<cr>`z
vnoremap <m-j> <esc><cmd>'<,'>m'>+<cr>gv
vnoremap <m-k> <esc><cmd>'<,'>m'<-2<cr>gv

# text: put/yank: TODO: xterm escape sequences:
nnoremap Y yg_
nnoremap yY mz0yg_`z
if exists('$DISPLAY') && executable('xclip')
    nnoremap <leader>Y vg_y<cmd>call system('xclip -sel clipboard', @0)<cr>
    nnoremap <leader>p <cmd>let @x = system('xclip -sel clipboard -o')<cr>"xp
    nnoremap <leader>yY mz0vg_y<cmd>call system('xclip -sel clipboard', @0)<cr>`z
    nnoremap <leader>yy yy<cmd>call system('xclip -sel clipboard', @0)<cr>
    nnoremap <leader>xp <cmd>let @0 = system('xclip -sel clipboard -o')<cr>
    nnoremap <leader>xy <cmd>call system('xclip -sel clipboard', @0)<cr>
endif

# navigation: indent: TODO:
#noremap <silent> [+ <scriptcmd>IndentNav(['prev', 'more'])<cr>
#noremap <silent> [- <scriptcmd>IndentNav(['prev', 'less'])<cr>
#noremap <silent> [= <scriptcmd>IndentNav(['prev', 'same'])<cr>
#noremap <silent> ]+ <scriptcmd>IndentNav(['next', 'more'])<cr>
#noremap <silent> ]- <scriptcmd>IndentNav(['next', 'less'])<cr>
#noremap <silent> ]= <scriptcmd>IndentNav(['next', 'same'])<cr>

# vim: set/toggle local options:
nnoremap <expr> <leader><space> v:hlsearch ? '<cmd>noh<cr>' : '<cmd>set hls<cr>'
nnoremap <expr> <leader>tS '<cmd>setl scl=' .. (&scl == 'no' ? 'number' : 'no') .. '<cr><cmd>setl scl?<cr>'
nnoremap <expr> <leader>tc '<cmd>setl cc=' .. (empty(&cc) ? '72' : (&cc == '72' ? '80' : '')) .. '<bar>setl cc?<cr>'
nnoremap <expr> <leader>tt '<cmd>set stal=' .. (&stal + 1) % 3 .. '<bar>set stal?<cr>'
nnoremap <expr> <leader>tz '<cmd>setl so' .. (&so == 999 ? '<' : '=999') .. '<bar>setl so?<cr>'
nnoremap <leader>t/ <cmd>let @/=''<bar>echo '"/ = ""'<cr>
nnoremap <leader>tC <cmd>setl cursorcolumn!<bar>setl cuc?<cr>
nnoremap <leader>tL <cmd>setl cursorline!<bar>setl cul?<cr>
nnoremap <leader>tM <cmd>setl modifiable!<bar>setl ma?<cr>
nnoremap <leader>tN <cmd>setl relativenumber!<bar>setl rnu?<cr>
nnoremap <leader>tR <cmd>setl readonly!<bar>setl ro?<cr>
nnoremap <leader>tl <cmd>setl buflisted!<bar>setl bl?<cr>
nnoremap <leader>tm <cmd>setl modified!<bar>setl mod?<cr>
nnoremap <leader>tn <cmd>setl number!<bar>setl nu?<cr>
nnoremap <leader>tp <cmd>setl paste!<bar>setl paste?<cr>
nnoremap <leader>ts <cmd>setl spell!<bar>setl spell?<cr>
nnoremap <leader>tw <cmd>setl wrap!<bar>setl wrap?<cr>

# vim: query local options/attributes:
nnoremap <leader>rM <cmd>setl modifiable?<cr>
nnoremap <leader>rR <cmd>setl readonly?<cr>
nnoremap <leader>rf <cmd>echo &filetype<cr>
nnoremap <leader>rh <scriptcmd>HiGroupPrint()<cr>
nnoremap <leader>rl <cmd>setl buflisted?<cr>
nnoremap <leader>rp <cmd>setl paste?<cr>
nnoremap <leader>rs <cmd>setl spell?<cr>

# vim: reload:
noremap <leader><c-l> <cmd>source ~/.vim/vimrc<bar>runtime! plugin/*.vim<cr><cmd>echo 'vim reloaded'<cr>

## mappings: command/insert/search ::
noremap! <c-a> <home>
noremap! <c-b> <left>
noremap! <c-d> <del>
noremap! <c-f> <right>
noremap! <c-h> <bs>
noremap! <m-b> <s-left>
noremap! <m-w> <s-right>

# completion menu: cancel selection, keep already entered text:
noremap! <expr> <c-c> pumvisible() ? '<c-e>' : '<c-c>'
noremap! <expr> <c-e> pumvisible() ? '<c-e>' : '<end>'
noremap! <expr> <c-u> pumvisible() ? '<c-e>' : '<c-u>'

## mappings: command/search ::
cnoremap <c-j> <down>
cnoremap <c-k> <up>
cnoremap <m-k> <c-k>
cnoremap <m-v> <c-q>

## mappings: insert ::
inoremap <c-g> <c-d>

## mappings: terminal ::
tnoremap <c-w><c-w> <c-w>w

# buffer: next/previous:
tnoremap <c-w>n <cmd>silent bnext<cr>
tnoremap <c-w><c-n> <cmd>silent bnext<cr>
tnoremap <c-w>p <cmd>silent bprevious<cr>
tnoremap <c-w><c-p> <cmd>silent bprevious<cr>

# buffer: wipe:
tnoremap <c-w><c-x> <scriptcmd>BufWipe('!')<cr>
tnoremap <c-w>X <scriptcmd>BufWipe('!')<cr>
tnoremap <c-w>x <scriptcmd>BufWipe('!')<cr>
tnoremap <c-x> <scriptcmd>BufWipe('!')<cr>

# buffer: list:
tnoremap <c-w>B <scriptcmd>BufList('!')<cr>:b<Space>
tnoremap <c-w>b <scriptcmd>BufList()<cr>:b<Space>

# window: close:
tnoremap <expr> <c-w><c-q> winnr('$') > 1 ? '<cmd>clo<cr>' : '<cmd>q<cr>'
tnoremap <expr> <c-w>q winnr('$') > 1 ? '<cmd>clo<cr>' : '<cmd>q<cr>'
tnoremap <expr> <c-w>Q '<cmd>' .. (winnr('$') > 1 ? 'clo!' : tabpagenr('$') > 1 ? 'q!' : 'qa!') .. '<cr>'

# buffer, window: wipe, close:
tnoremap <expr> <c-w>` '<scriptcmd>BufWipe("!")<bar>' .. (winnr("$") > 1 ? 'clo!<cr>' : 'q!<cr>')

## commands ::
command! -bang BufList BufList(<q-bang>)
command! -bang BufWipe BufWipe(<q-bang>)
command! -bang BufWipeHidden BufWipeHidden(<q-bang>)

# set/reset CNT counter:
command! -nargs=? CntSet CntSet(<args>)

# display command output in new buffer:
command! -nargs=1 -complete=command BufCmd enew<bar>redir @c<bar>silent <args><bar>redir END<bar>put c<bar>setl nomodified

## functions ::
def BufList(bang = '')
    const bufs = empty(bang) ? filter(range(1, bufnr('$')),
      'buflisted(v:val)') : filter(range(1, bufnr('$')), 'bufexists(v:val)')
    var bufname = ''
    var bufnamelen = 0
    var bufpath = ''
    var bufslist = []
    var buftag = ''
    var buftype = ''
    for buf in bufs
        bufname = bufname(buf)
        bufpath = expand('#' .. buf .. ':p')
        buftag = ' '
        buftype = getbufvar(buf, '&buftype')
        if getbufvar(buf, '&filetype') == 'netrw' || bufpath =~ '.*/$'
            bufname = '[netrw]'
        elseif buftype == 'help' || bufpath =~ '.*/vim82/doc/.*txt$'
            bufname = '[h:' .. fnamemodify(bufname, ':t:r') .. ']'
        elseif buftype == 'quickfix'
            bufname = '[quickfix]'
        elseif buftype == 'nofile'
            bufname = bufname =~ '\/.' ? substitute(bufname,
              '.*\/\ze.', '', '') : bufname
        elseif buftype == 'terminal'
            bufname = '[terminal]'
            bufpath = term_gettitle(buf)
        else
            bufname = empty(bufname) ? '[no name]' : fnamemodify(bufname, ':p:t')
            buftag = getbufvar(buf, '&modified') ? '+' : ' '
        endif
        bufnamelen = max([len(bufname), bufnamelen])
        add(bufslist, [buf, bufname, bufpath, buftag])
    endfor
    for buf in bufslist
        echohl Constant
        echo printf('%3d ', buf[0])
        if buf[0] == bufnr('%')
            echohl String
        elseif index(tabpagebuflist(), buf[0]) >= 0
            echohl Special
        elseif !buflisted(buf[0])
            echohl Comment
        else
            echohl normal
        endif
        echon printf('%1s%-*s', buf[3], bufnamelen, buf[1]) .. '  '
        if buf[0] == bufnr('%') || index(tabpagebuflist(), buf[0]) >= 0
            echohl Type
        elseif !buflisted(buf[0])
            echohl Comment
        else
            echohl normal
        endif
        echon buf[2]
    endfor
    echohl nONE
enddef

def BufWipe(bang = '')
    const buf = bufnr('%')
    const wincur = winnr()
    if empty(bang) && &modified
        Msg('E: unsaved buffer modified')
        return
    endif
    for tab in range(1, tabpagenr('$'))
        tabnext
        for win in filter(range(1, winnr('$')), 'winbufnr(v:val) == ' .. buf)
            exec ':' .. win .. 'wincmd w'
            if len(filter(range(1, bufnr('$')),
              'buflisted(v:val) && v:val != ' .. buf)) > 0
                silent bprevious
            else
                enew
            endif
        endfor
    endfor
    exec ':' .. wincur .. 'wincmd w'
    if bufexists(buf)
        exec 'bwipeout' .. bang .. ' ' .. buf
    endif
enddef

def BufWipeHidden(bang = '')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && bufwinnr(v:val) == -1')
        if getbufvar(buf, '&buftype') == 'terminal'
            exec 'bwipeout! ' .. buf
        elseif empty(bang) && getbufvar(buf, '&modified')
            Msg('E: unsaved buffer modified: ' .. buf)
        else
            exec 'bwipeout' .. bang .. ' ' .. buf
        endif
    endfor
enddef

def CommentToggle(bang = '')
    if ! &modifiable
        return
    endif
    var line0 = line('.')
    var line1 = line0
    if mode() ==? 'v'
        exec "normal! \<esc>"
        line0 = getpos("'<")[1]
        line1 = getpos("'>")[1]
    endif
    const cmts = split(&commentstring, '%s')
    var cmt0 = '#'
    var cmt1 = ''
    if len(cmts) > 0
        cmt0 = substitute(substitute(escape(cmts[0], '*.\'),
          '\s\+', '', 'g'), '^\\\.\\\.', '\\\.\\\. ', '')
    endif
    if len(cmts) > 1
        cmt1 = substitute(escape(cmts[1], '*.\'), '\s\+', '', 'g')
    endif
    const regex_comment = '\(^\s*\)' .. cmt0 .. '\(.\{-}\)' .. cmt1 .. '\s*$'
    const regex_heading = '^\s*\(' .. cmt0 .. '\)\+\s.\{-}' .. cmt1 .. '\s*$'
    const regex_line = '^\(\s*\)\(.\{-}\)\s*$'
    const sub_comment = '\1' .. cmt0 .. '\2' .. cmt1
    const sub_line = '\1\2\3'
    var text0 = ''
    var text1 = ''
    for line in range(line0, line1)
        text0 = getline(line)
        text1 = text0
        if match(text0, '^\s*$') >= 0 || match(text0, regex_heading) >= 0
          || (bang == '!' && cmt1 == '\*/')
            continue
        endif
        if bang == '!' || match(text0, regex_comment) < 0
            text1 = substitute(text0, regex_line, sub_comment, '')
        else
            text1 = substitute(text0, regex_comment, sub_line, '')
        endif
        if text0 != text1
            setline(line, text1)
        endif
    endfor
enddef

var CNT = 1
def g:Cnt(pad = 2): string
	CNT = CNT + 1
	return printf('%0' .. pad .. 'd', CNT - 1)
enddef

def CntSet(start = 1)
    CNT = start
    echo 'CNT = ' .. CNT
enddef

def DateUpdate()
    if ! &modifiable
        return
    endif
    if match(getline('.'), '\d\d\d\d-\d\d-\d\d') >= 0
        if match(getline('.'), strftime('%F')) < 0
            silent keeppatterns s/\d\d\d\d-\d\d-\d\d/\=strftime('%F')/
            normal ``
        endif
    else
        exec 'normal a' .. strftime('%F') .. "\<esc>"
    endif
enddef

def HiGroupPrint()
    echo [synIDattr(synID(line('.'), col('.'), 1), 'name'),
      synIDattr(synID(line('.'), col('.'), 0), 'name'),
      synIDattr(synIDtrans(synID(line('.'), col('.'), 1)), 'name')]
enddef

def HTMLToggle(bang = '')
    if ! &modifiable
        return
    endif
    var line0 = line('.')
    var line1 = line0
    if mode() ==? 'v'
        exec "normal! \<esc>"
        line0 = getpos("'<")[1]
        line1 = getpos("'>")[1]
    endif
    var text0 = ''
    var text1 = ''
    for line in range(line0, line1)
        text0 = getline(line)
        text1 = text0
        if empty(bang) && match(text0, '&\(amp\|gt\|lt\);') >= 0
            text1 = substitute(substitute(substitute(text0,
              '&amp;', '\&', 'g'), '&gt;', '>', 'g'), '&lt;', '<', 'g')
        else
            text1 = substitute(substitute(substitute(text0,
              "&", '\&amp;', 'g'), '>', '\&gt;', 'g'), '<', '\&lt;', 'g')
        endif
        if text0 != text1
            setline(line, text1)
        endif
    endfor
enddef

def IndentNav(move = ['next', 'same'])
    const line = getpos('.')[1]
    var linenew = line
    var indent = indent(line)
    var inc = 1
    if move[1] == 'more'
        indent = indent + &tabstop
    elseif move[1] == 'less'
        indent = indent - &tabstop
    endif
    if move[0] == 'prev'
        inc = -1
    endif
    while linenew <= line('$') && linenew >= 1
        linenew = linenew + inc
        if indent(linenew) == indent
            break
        endif
    endwhile
    if line != linenew && linenew <= line('$') && linenew >= 1
        setpos(".", [0, linenew, indent + 1, 0])
    endif
enddef

def Msg(msg = '')
    if msg =~ '^[Ww]\d*:.*'
        echohl WarningMsg
    elseif msg =~ '^[Ee]\d*:.*'
        echohl ErrorMsg
    elseif msg =~ '^--.*--$'
        echohl ModeMsg
    else
        echohl InfoMsg
    endif
    echomsg msg
    echohl nONE
enddef

def TextTrim()
    if ! &modifiable
        return
    endif
    const pos = getpos('.')
    keeppatterns :%s/\s\+$//e
    keeppatterns :%s/\($\n\s*\)\+\%$//e
    setpos('.', pos)
enddef

def g:StatusLine(): string
    const sepbar = '%#StatusLineSep# | %*'
    const sepcolon = '%#StatusLineSep#:%*'
    const buf = winbufnr(g:statusline_winid)
    const filetype = getbufvar(buf, '&filetype')
    const buftype = getbufvar(buf, '&buftype')
    var bufname = ''
    var bufpath = ''
    var buftag = ''
    var line = ''
    if filetype == 'netrw' || bufpath =~ '.*/$'
        bufname = '[netrw]'
        buftag = ' '
    elseif buftype == 'terminal'
        bufname = '[terminal]'
        bufpath = term_gettitle(buf)
        buftag = ' '
    elseif buftype == 'help'
        bufname = '[h:%{expand("%:t:r")}]'
        buftag = ' '
    elseif buftype == 'quickfix'
        bufname = '[quickfix]'
    elseif empty(bufname(buf))
        bufname = '[no name]'
        bufpath = getcwd(g:statusline_winid)
    else
        bufname = '%{expand("%:p:t")}'
    endif
    if buftype != 'terminal'
        bufpath = bufpath ?? expand('#' .. buf .. ':p:h')
        if ! empty(UDIR) && match(bufpath, '^' .. UDIR) > -1
            bufpath = substitute(bufpath, '^' .. UDIR, '-', '')
        else
            bufpath = substitute(bufpath, '^' .. HOME, '~', '')
        endif
        bufpath ..= bufpath != '/' ? '/' : ''
    endif
    buftag = buftag ?? '%{&modified ? "+" : " "}'
    line =  buftag .. bufname .. sepbar .. '%*%<'
    if g:statusline_winid == win_getid(winnr())
        line ..= '%#StatusLinePath#' .. bufpath .. '%=%( %#StatusLineType#'
          .. filetype .. sepbar .. '%*%#StatusLinePct#%P' .. sepbar
          .. '%#StatusLineLen#%2L' .. sepcolon .. '%2l' .. sepbar .. '%#StatusLineLen#'
    else
        line ..= bufpath .. '%=%( ' .. filetype .. sepbar .. '%P'
          .. sepbar .. '%2L' .. sepcolon .. '%2l' .. sepbar
    endif
    line ..= '%2{strlen(getline("."))}' .. sepcolon .. '%2c %)'
    return line
enddef

def g:TabLine(): string
    var buflist = []
    var bufname = ''
    var buf = 0
    var bufpath = ''
    var buftag = ' '
    var buftype = ''
    var filetype = ''
    var tabnum = 1
    var win = 0
    var line = ''
    while tabnum <= tabpagenr('$')
        win = tabpagewinnr(tabnum)
        buflist = tabpagebuflist(tabnum)
        buf = buflist[win - 1]
        bufname = bufname(buf)
        bufpath = expand('#' .. buf .. ':p')
        buftype = getbufvar(buf, '&buftype')
        filetype = getbufvar(buf, '&filetype')
        buftag = ' '
        if filetype == 'netrw' || bufpath =~ '.*/$'
            buftype = 'netrw'
            bufname = '[netrw]'
        elseif buftype == 'help'
            bufname = '[h:' .. fnamemodify(bufname, ':t:r') .. ']'
        elseif buftype == 'quickfix'
            bufname = '[quickfix]'
        elseif buftype == 'terminal'
            bufname = '[terminal]'
        elseif buftype == 'nofile'
            bufname = bufname =~ '\/.' ? substitute(bufname, '.*\/\ze.', '', '') : bufname
        else
            bufname = fnamemodify(bufname, ':p:t')
            bufname = bufname ?? '[no name]'
            buftag = getbufvar(buf, '&modified') && buftype != 'terminal' ? '+' : ' '
        endif
        if buftag != '+' && len(filter(buflist, buf .. ' != v:val && getbufvar(v:val, "&modified")'
          .. ' && getbufvar(v:val, "&buftype") != "terminal"')) > 0
            buftag = '*'
        endif
        line ..= (tabnum == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#')
          .. buftag .. bufname .. ' ' .. '%#TabLineSep#|'
        tabnum = tabnum + 1
    endwhile
    line ..= '%T%#TabLineFill#'
    return line
enddef

def VisMode(mode = 'v')
    var charnum = 0
    var chars = ''
    var line = line('.')
    exec 'normal! ' .. mode
    while 1
        if mode() !=? 'v'
            if mode ==# 'v'
                normal! gv
            else
                normal! `>v`<
                if line('.') != line
                    normal! o
                endif
            endif
        endif
        redraw
        if mode ==# 'v'
            Msg('-- VISMODE --')
        else
            Msg('-- VISMODE LInE --')
        endif
        charnum = getchar()
        if charnum == 27
            return
        endif
        if charnum == 105 || charnum == 97
            chars = nr2char(charnum)
            continue
        endif
        line = line('.')
        chars ..= nr2char(charnum)
        exec 'normal ' .. chars
        chars = ''
    endwhile
enddef

def WinMode()
    var charnum = 0
    var chars = ''
    while 1
        redraw
        Msg('-- WInMODE --')
        charnum = getchar()
        if charnum == 27
            redraw
            echon ''
            return
        endif
        if charnum == 103 || charnum == 71
            chars = nr2char(charnum)
            continue
        endif
        chars ..= nr2char(charnum)
        exec 'normal ' .. nr2char(23) .. chars
        chars = ''
    endwhile
enddef

defcompile
